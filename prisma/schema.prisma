// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String             @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?            @db.Text
    access_token      String?            @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?            @db.Text
    session_state     String?
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    Messages          Messages[]
    Inbox             Inbox[]
    InboxParticipant  InboxParticipant[]

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model InboxParticipant {
    id         String @id
    account_id String @map("accountId")
    inbox_id   String @map("inboxId")

    account Account @relation(fields: [account_id], references: [id])
    inbox   Inbox   @relation(fields: [inbox_id], references: [id])

    @@map("InboxParticipants")
}

model Inbox {
    id                   String             @id @default(cuid())
    account_id           String             @map("accountId")
    last_sent_account_id String             @map("lastSentAccountId")
    last_sent_message_id String             @map("lastSentMessageId")
    account              Account            @relation(fields: [last_sent_account_id], references: [id], onUpdate: Cascade)
    Messages             Messages[]
    InboxParticipant     InboxParticipant[]
}

model Messages {
    id              String  @id @default(cuid())
    accountId       String
    inboxId         String
    message         String  @db.VarChar()
    attachment_path String? @map("attachmentPath") @db.VarChar()
    account         Account @relation(fields: [accountId], references: [id])
    inbox           Inbox   @relation(fields: [inboxId], references: [id])
}
